(defun generate-color-transition-map ()
	(let ((total-max-colors-difference 0))
		(declare (type fixnum total-max-colors-difference))
		(setq total-max-colors-difference (get-total-max-colors-difference))
		(setq color-transition-map (make-array (list total-max-colors-difference) :element-type 'fixnum))
		(let ((color-transition-map-index 0) (max-colors-difference 0))
			(declare (type fixnum color-transition-map-index max-colors-difference))
			(dotimes (setting-colors-index (1- (length setting-colors)))
				(setq max-colors-difference (get-max-colors-difference setting-colors-index))
				(add-to-color-transition-map color-transition-map-index)))))

(defun get-total-max-colors-difference ()
	(let max-color))

(defun get-max-colors-difference (setting-colors-index)
	(let ((max-colors-difference 0) (start-colors) (end-colors))
		(declare (type fixnum max-colors-difference))
		(setq start-colors (nth setting-colors-index setting-colors))
		(setq end-colors (nth (1+ setting-colors-index) setting-colors))
		(if (> (abs (- (first start-colors) (first end-colors))) max-colors-difference)
				(setq max-colors-difference (abs (- (first start-colors) (first end-colors)))))
		(if (> (abs (- (second start-colors) (second end-colors))) max-colors-difference)
				(setq max-colors-difference (abs (- (second start-colors) (second end-colors)))))
		(if (> (abs (- (third start-colors) (third end-colors))) max-colors-difference)
				(setq max-colors-difference (abs (- (third start-colors) (third end-colors)))))
		max-colors-difference))

(defun add-to-color-transition-map (color-transition-map-index)
	(dotimes (transition-index total-colors-difference)
		)
	color-transition-map-index)