(defun generate-color-transition-map ()
	(let ((start-colors) (end-colors) (colors-differences) (max-colors-differences) (total-max-colors-difference 0) (color-transition-map-index 0))
		(declare (type fixnum total-max-colors-difference color-transition-map-index))
		(multiple-value-setq (start-colors end-colors) (get-start-and-end-colors))
		(setq colors-differences (get-colors-differences start-colors end-colors))
		(setq max-colors-differences (get-max-colors-differences colors-differences))
		(setq total-max-colors-difference (get-total-max-colors-difference max-colors-differences))
		(setq color-transition-map (make-array (list total-max-colors-difference) :element-type 'fixnum))
		(populate-color-transition-map max-colors-differences start-colors end-colors)))

(defun get-start-and-end-colors ()
	(let ((start-colors) (end-colors))
		(dotimes (setting-colors-index (1- (length setting-colors)))
			(setq start-colors (append start-colors (list (nth setting-colors-index setting-colors))))
			(setq end-colors (append end-colors (list (nth (1+ setting-colors-index) setting-colors)))))
		(values start-colors end-colors)))

(defun get-colors-differences (start-colors end-colors)
	(let ((colors-differences '()))
		(dotimes (colors-index (length start-colors))
			(setq colors-differences (append colors-differences (list (get-colors-difference (nth colors-index start-colors) (nth colors-index end-colors))))))
		colors-differences))

(defun get-colors-difference (start-row end-row)
	(list
	 (abs (- (first start-row) (first end-row)))
	 (abs (- (second start-row) (second end-row)))
	 (abs (- (third start-row) (third end-row)))))

(defun get-max-colors-differences (colors-differences)
	(let ((max-colors-difference 0) (max-colors-differences '()))
		(declare (type fixnum max-colors-difference))
		(dotimes (colors-differences-index (length colors-differences))
			(setq max-colors-difference 0)
			(let ((r) (g) (b))
				(setq r (first (nth colors-differences-index colors-differences)))
				(setq g (second (nth colors-differences-index colors-differences)))
				(setq b (third (nth colors-differences-index colors-differences)))
				(if (> r max-colors-difference)
						(setq max-colors-difference r))
				(if (> g max-colors-difference)
						(setq max-colors-difference g))
				(if (> b max-colors-difference)
						(setq max-colors-difference b))
				(setq max-colors-differences (append max-colors-differences (list max-colors-difference)))))
		max-colors-differences))

(defun get-max-colors-difference (setting-colors-index)
	(let ((max-colors-difference 0) (start-colors) (end-colors))
		(declare (type fixnum max-colors-difference))
		(setq start-colors (nth setting-colors-index setting-colors))
		(setq end-colors (nth (1+ setting-colors-index) setting-colors))
		(if (> (abs (- (first start-colors) (first end-colors))) max-colors-difference)
				(setq max-colors-difference (abs (- (first start-colors) (first end-colors)))))
		(if (> (abs (- (second start-colors) (second end-colors))) max-colors-difference)
				(setq max-colors-difference (abs (- (second start-colors) (second end-colors)))))
		(if (> (abs (- (third start-colors) (third end-colors))) max-colors-difference)
				(setq max-colors-difference (abs (- (third start-colors) (third end-colors)))))
		max-colors-difference))

(defun get-total-max-colors-difference (max-colors-differences)
	(let ((total-max-colors-difference 0))
		(declare (type fixnum total-max-colors-difference))
		(dotimes (max-colors-differences-index (length max-colors-differences))
			(incf total-max-colors-difference (nth max-colors-differences-index max-colors-differences)))
		total-max-colors-difference))

(defun populate-color-transition-map (max-colors-differences start-colors end-colors)
	(let ((max-color-differences-)
	(iter (for max-color-difference in max-color-differences)
				(let (r-ratio (+ (/ (- (first end-colors) (first start-colors))) (first start-colors))))
				(dotimes (color-transition-iteration max-color-difference)
					(let (r (* )) (g) (b)))))